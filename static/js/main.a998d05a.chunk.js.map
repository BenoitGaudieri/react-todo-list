{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","onClick","completed","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a998d05a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nexport default class Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task,\r\n        };\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n\r\n    handleRemove() {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ isEditing: !this.state.isEditing });\r\n    }\r\n\r\n    handleUpdate(evt) {\r\n        evt.preventDefault();\r\n        // take new task data and pass up to parent\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({ isEditing: false });\r\n    }\r\n\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value,\r\n        });\r\n    }\r\n\r\n    // Toggle completion style\r\n    handleToggle(evt) {\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if (this.state.isEditing) {\r\n            result = (\r\n                <div className=\"todo\">\r\n                    <form\r\n                        className=\"Todo-edit-form\"\r\n                        onSubmit={this.handleUpdate}\r\n                    >\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.task}\r\n                            name=\"task\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        } else {\r\n            result = (\r\n                <div className=\"todo\">\r\n                    <li\r\n                        onClick={this.handleToggle}\r\n                        className={\r\n                            this.props.completed\r\n                                ? \"todo-task completed\"\r\n                                : \"todo-task\"\r\n                        }\r\n                    >\r\n                        {this.props.task}\r\n                    </li>\r\n                    <div className=\"todo-buttons\">\r\n                        <button onClick={this.toggleForm}>\r\n                            <i className=\"fas fa-pen\" />\r\n                        </button>\r\n                        <button onClick={this.handleRemove}>\r\n                            <i className=\"fas fa-trash\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nexport default class NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: \"\",\r\n        };\r\n\r\n        // Functions binds\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value,\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n        this.setState({ task: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">Todo: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"New Todo\"\r\n                    id=\"task\"\r\n                    name=\"task\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport \"./Todolist.css\";\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: [],\r\n        };\r\n\r\n        // Functions binds\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n\r\n    create(newTodo) {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo],\r\n        });\r\n    }\r\n\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter((t) => t.id !== id),\r\n        });\r\n    }\r\n\r\n    update(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                return { ...todo, task: updatedTask };\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({ todos: updatedTodos });\r\n    }\r\n\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                return { ...todo, completed: !todo.completed };\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({ todos: updatedTodos });\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos.map((todo) => {\r\n            return (\r\n                <Todo\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    task={todo.task}\r\n                    completed={todo.completed}\r\n                    removeTodo={this.remove}\r\n                    updateTodo={this.update}\r\n                    toggleTodo={this.toggleCompletion}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"todolist\">\r\n                <h1>\r\n                    Todo list\r\n                    <span>Your todos in a simple React Todo List App</span>\r\n                </h1>\r\n                <ul>{todos}</ul>\r\n                <NewTodoForm createTodo={this.create} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList.js';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TodoList />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}