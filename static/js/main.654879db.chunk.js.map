{"version":3,"sources":["NewTodoForm.js","TodoEdit.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","todo","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","newTodo","id","uuid","completed","addItem","new_todo","className","onSubmit","htmlFor","type","placeholder","onChange","Component","TodoEdit","edit_submit","edit_toggle","handleEdit","handleUpdate","handleToggle","toggleTodo","update","result","onClick","class","remove","TodoList","new_item","filter","updatedTodo","updatedTodos","map","toggleComplete","todos","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.654879db.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport './NewTodoForm.css';\r\n\r\nexport default class NewTodoForm extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { todo: '' };\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\r\n\t/* Updates the state when filling the form through onChange */\r\n\thandleChange(evt) {\r\n\t\tthis.setState({\r\n\t\t\t[evt.target.name]: evt.target.value\r\n\t\t});\r\n\t}\r\n\r\n\thandleSubmit(evt) {\r\n\t\tevt.preventDefault();\r\n\t\tconst newTodo = { ...this.state, id: uuid(), completed: false };\r\n\t\tthis.props.addItem(newTodo);\r\n\t\tthis.setState({ new_todo: '' });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<label htmlFor=\"todo\">Todo: </label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"New Todo\"\r\n\t\t\t\t\t\tname=\"todo\"\r\n\t\t\t\t\t\tvalue={this.state.todo}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button>Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nexport default class TodoEdit extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tedit_submit: this.props.todo,\r\n\t\t\tedit_toggle: false\r\n\t\t};\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleEdit = this.handleEdit.bind(this);\r\n\t\tthis.handleUpdate = this.handleUpdate.bind(this);\r\n\t\tthis.handleToggle = this.handleToggle.bind(this);\r\n\t}\r\n\r\n\thandleToggle(evt) {\r\n\t\tthis.props.toggleTodo(this.props.id);\r\n\t}\r\n\r\n\t/* This is just a toggle for the form triggered by a button */\r\n\thandleEdit() {\r\n\t\tthis.setState({\r\n\t\t\tedit_toggle: !this.state.edit_toggle\r\n\t\t});\r\n\t}\r\n\r\n\t/* Uses the function from parent passing the id and the new edited text */\r\n\thandleUpdate(evt) {\r\n\t\tevt.preventDefault();\r\n\t\tthis.props.update(this.props.id, this.state.edit_submit);\r\n\t\tthis.handleEdit();\r\n\t}\r\n\r\n\t/* Usual handleChange for forms */\r\n\thandleChange(evt) {\r\n\t\tthis.setState({\r\n\t\t\t[evt.target.name]: evt.target.value\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet result;\r\n\t\tif (this.state.edit_toggle) {\r\n\t\t\tresult = (\r\n\t\t\t\t<div className=\"todo\">\r\n\t\t\t\t\t<form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n\t\t\t\t\t\t<label htmlFor=\"edit_submit\" />\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"edit_submit\"\r\n\t\t\t\t\t\t\tvalue={this.state.edit_submit}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button>Edit</button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tresult = (\r\n\t\t\t\t<div className=\"todo\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\tonClick={this.handleToggle}\r\n\t\t\t\t\t\t\tclassName={this.props.completed ? 'todo-task completed' : 'todo-task'}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{this.props.todo}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<div className=\"todo-buttons\">\r\n\t\t\t\t\t\t<button onClick={this.handleEdit}>\r\n\t\t\t\t\t\t\t<i class=\"fas fa-pen\" />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={this.props.remove}>\r\n\t\t\t\t\t\t\t<i class=\"fas fa-trash\" />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div>{result}</div>;\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport NewTodoForm from './NewTodoForm.js';\r\nimport TodoEdit from './TodoEdit.js';\r\nimport './Todolist.css';\r\n\r\nexport default class TodoList extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttodo: []\r\n\t\t};\r\n\t\tthis.addItem = this.addItem.bind(this);\r\n\t\tthis.update = this.update.bind(this);\r\n\t\tthis.toggleTodo = this.toggleTodo.bind(this);\r\n\t}\r\n\r\n\taddItem(new_item) {\r\n\t\tthis.setState({\r\n\t\t\ttodo: [ ...this.state.todo, new_item ]\r\n\t\t});\r\n\t}\r\n\r\n\tremove(id) {\r\n\t\tthis.setState({\r\n\t\t\ttodo: this.state.todo.filter((todo) => todo.id !== id)\r\n\t\t});\r\n\t}\r\n\r\n\tupdate(id, updatedTodo) {\r\n\t\tconst updatedTodos = this.state.todo.map((todo) => {\r\n\t\t\tif (todo.id === id) {\r\n\t\t\t\t/* it unpacks the todo so we don't lose the id, then reassign the todo (the \"task\" passed by the form) only to the new todo.  */\r\n\t\t\t\treturn { ...todo, todo: updatedTodo };\r\n\t\t\t}\r\n\t\t\treturn todo;\r\n\t\t});\r\n\t\tthis.setState({ todo: updatedTodos });\r\n\t}\r\n\r\n\ttoggleTodo(id) {\r\n\t\tconst toggleComplete = this.state.todo.map((todo) => {\r\n\t\t\tif (todo.id === id) {\r\n\t\t\t\treturn { ...todo, completed: !todo.completed };\r\n\t\t\t}\r\n\t\t\treturn todo;\r\n\t\t});\r\n\t\tthis.setState({ todo: toggleComplete });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst todos = this.state.todo.map((todo) => (\r\n\t\t\t<TodoEdit\r\n\t\t\t\t{...todo}\r\n\t\t\t\tkey={todo.id}\r\n\t\t\t\tupdate={this.update}\r\n\t\t\t\ttoggleTodo={this.toggleTodo}\r\n\t\t\t\tremove={() => this.remove(todo.id)}\r\n\t\t\t/>\r\n\t\t));\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"todolist\">\r\n\t\t\t\t<h1>\r\n\t\t\t\t\tTodo List <span>A simple Todo List App made with React</span>{' '}\r\n\t\t\t\t</h1>\r\n\t\t\t\t{todos}\r\n\t\t\t\t<NewTodoForm addItem={this.addItem} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList.js';\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<TodoList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}